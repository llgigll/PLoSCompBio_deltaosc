function [] = reducedcirc_basic()
%% Balanced Circuitry for Persistent Activity
%  Looking at how changing the weights of the network to increase balanced
%  amplification impacts the network time constant.

Io_type = 'const';
end_val = 0; % Tells event solver when to end the computation

I = 1;

q = 0.5;
w_hold = [1,5,10.0];

te  = 0.02;
ti  = 0.01;
tee_a = 0.005;
tee_n = 0.1;
tie_a = 0.005;
tie_n = 0.1;
tei = 0.01;
tii = 0.01;

qdiff = [0,0.2,0.4];

Jo  = [I;0;0;0;0;0;0;0];
tau = [1/te;zeros(7,1)];
Io_begin = 0;
Io_end = 2.0;
t0 = 0;
t_end = 4;
y0 = [0.00001;zeros(7,1)];

figure('color','w')
for j = 1:length(qdiff);
    qdiff1 = qdiff(j);
    ye = cell(length(w_hold),1);
    yi = cell(length(w_hold),1);
    yt = cell(length(w_hold),1);
    y_leg = cell(length(w_hold),1);
    for i = 1:length(w_hold)
        w = w_hold(i);
        Jee = w;
        Jei = 10;
        Jie = w;
        Jii = 0;
        A = [-1/te,0,((1-q)-qdiff1)*(Jee)/te,(q+qdiff1)*(Jee)/te,0,0,-Jei/te,0;...
             0,-1/ti,0,0,(1-q)*Jie/ti,q*Jie/ti,0,-Jii/ti;...
             1/tee_a,0,-1/tee_a,0,0,0,0,0;...
             1/tee_n,0,0,-1/tee_n,0,0,0,0;...
             1/tie_a,0,0,0,-1/tie_a,0,0,0;...
             1/tie_n,0,0,0,0,-1/tie_n,0,0;...
             0,1/tei,0,0,0,0,-1/tei,0;...
             0,1/tii,0,0,0,0,0,-1/tii];


        t_past = [];
        tspan = [t0 t_end]; 
        options = odeset('MaxStep',0.001);
        [T,Y] = ode45(@odefun,tspan,y0,options);

        ye{i} = Y(:,1);
        yi{i} = Y(:,2);
        yt{i} = T;
        y_leg{i} = ['w = ', num2str(w_hold(i))];
    end

    subplot(1,3,j)
    for i = 1:length(ye)
        plot(yt{i},ye{i})
        hold on
    end
    xlabel('Time (s)')
    ylabel('Rate (Hz)')
    title(['\Delta q = ',num2str(qdiff1)])
    legend(y_leg{:})

end



function dy = odefun(t,y)
    if t > Io_end && end_val == 0
        end_val = y(1); 
    end
    
    if strcmp(Io_type,'pulse')
        Io = input_pulse(t);
    elseif strcmp(Io_type,'const')
        Io = input_const(t);
    end
    B=A;
%     if t>1
%         qie = 0.5*(1-p);
%         qee = 0.5*(1+p);
%         B(1,3)=x1*(1-qee)*Jee/(te);
%         B(1,4)=x2*qee*Jee/(te);
%         B(2,5)=x2*(1-qie)*Jie/(ti);
%         B(2,6)=x1*qie*Jie/(ti);
%     end
    dy =  B * y + tau .* Jo .* Io ;
    t_past = [t_past,t];
end


function Io = input_pulse(t)
    x = @(s)1*(exp(-s/0.1)-exp(-s/0.02));

    if t >= Io_begin
        Io = [x(t-Io_begin);x(t-Io_begin);0;0;0;0;0;0];
    else
        Io = [zeros(8,1)];
    end
end


function Io = input_const(t)
    if t >= Io_begin && t <= Io_end
        Io = [(sigmf(t,[100,Io_begin])-0.5)*2;0;0;0;0;0;0;0];
    elseif t > Io_end
        Io = [sigmf(t,[-100,Io_end])*2;0;0;0;0;0;0;0];
    end
end

end


















